// Generated by CoffeeScript 1.6.3
(function() {
  var mycard;

  mycard = {
    card_usages_key: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
    card_usages_decode: function(encoded) {
      var card_id, char, count, decoded, i, result, side, _i, _j, _len, _ref, _ref1;
      result = [];
      if (!encoded) {
        return result;
      }
      for (i = _i = 0, _ref = encoded.length; _i < _ref; i = _i += 5) {
        decoded = 0;
        _ref1 = encoded.substr(i, 5);
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          char = _ref1[_j];
          decoded = (decoded << 6) + this.card_usages_key.indexOf(char);
        }
        side = !!(decoded >> 29);
        count = decoded >> 27 & 0x3;
        card_id = decoded & 0x07FFFFFF;
        result.push({
          card_id: card_id,
          side: side,
          count: count
        });
      }
      return result;
    },
    card_usages_equal: function(card_usages1, card_usages2) {
      var card_id, cards_usage, count, main, side, _i, _j, _len, _len1;
      main = {};
      side = {};
      for (_i = 0, _len = card_usages1.length; _i < _len; _i++) {
        cards_usage = card_usages1[_i];
        if (cards_usage.side) {
          if (side[cards_usage.card_id]) {
            side[cards_usage.card_id] += cards_usage.count;
          } else {
            side[cards_usage.card_id] = cards_usage.count;
          }
        } else {
          if (main[cards_usage.card_id]) {
            main[cards_usage.card_id] += cards_usage.count;
          } else {
            main[cards_usage.card_id] = cards_usage.count;
          }
        }
      }
      for (_j = 0, _len1 = card_usages2.length; _j < _len1; _j++) {
        cards_usage = card_usages2[_j];
        if (cards_usage.side) {
          if (side[cards_usage.card_id]) {
            side[cards_usage.card_id] -= cards_usage.count;
          } else {
            return false;
          }
        } else {
          if (main[cards_usage.card_id]) {
            main[cards_usage.card_id] -= cards_usage.count;
          } else {
            return false;
          }
        }
      }
      for (card_id in main) {
        count = main[card_id];
        if (count) {
          return false;
        }
      }
      for (card_id in side) {
        count = side[card_id];
        if (count) {
          return false;
        }
      }
      return true;
    }
  };

  module.exports = mycard;

  this.mycard = {};

  this.mycard.room_name = function(name, password, pvp, rule, mode, start_lp, start_hand, draw_count, enable_priority, no_check_deck, no_shuffle_deck) {
    var result;
    if (pvp == null) {
      pvp = false;
    }
    if (rule == null) {
      rule = 0;
    }
    if (mode == null) {
      mode = 0;
    }
    if (start_lp == null) {
      start_lp = 8000;
    }
    if (start_hand == null) {
      start_hand = 5;
    }
    if (draw_count == null) {
      draw_count = 1;
    }
    if (enable_priority == null) {
      enable_priority = false;
    }
    if (no_check_deck == null) {
      no_check_deck = false;
    }
    if (no_shuffle_deck == null) {
      no_shuffle_deck = false;
    }
    if (rule !== 0 || start_lp !== 8000 || start_hand !== 5 || draw_count !== 1) {
      result = "" + rule + mode + (enable_priority ? 'T' : 'F') + (no_check_deck ? 'T' : 'F') + (no_shuffle_deck ? 'T' : 'F') + start_lp + "," + start_hand + "," + draw_count + ",";
    } else if (mode === 2) {
      result = "T#";
    } else if (pvp && mode === 1) {
      result = "PM#";
    } else if (pvp) {
      result = "P#";
    } else if (mode === 1) {
      result = "M#";
    } else {
      result = "";
    }
    result += name;
    result = encodeURIComponent(result);
    if (password) {
      result += '$' + encodeURIComponent(password);
    }
    return result;
  };

  this.mycard.room_string = function(ip, port, room, username, password, _private, server_auth) {
    var result;
    result = '';
    if (username) {
      result += encodeURIComponent(username);
      if (password) {
        result += ':' + encodeURIComponent(password);
      }
      result += '@';
    }
    result += ip + ':' + port + '/' + room;
    if (_private) {
      result += '?private=true';
      if (server_auth) {
        result += '&server_auth=true';
      }
    } else if (server_auth) {
      result += '?server_auth=true';
    }
    return result;
  };

  this.mycard.room_url = function(ip, port, room, username, password, _private, server_auth) {
    var result;
    return result = 'http://my-card.in/rooms/' + this.room_string(ip, port, room, username, password, _private, server_auth);
  };

  this.mycard.room_url_mycard = function(ip, port, room, username, password, _private, server_auth) {
    var result;
    return result = 'mycard://' + this.room_string(ip, port, room, username, password, _private, server_auth);
  };

  this.mycard.join = function(ip, port, room, username, password, _private, server_auth) {
    return window.location.href = this.room_url_mycard(ip, port, room, username, password, _private, server_auth);
  };

  this.mycard.load_card_usages_from_cards = function(cards) {
    var card_id, count, last_id, result, _i, _len;
    result = [];
    last_id = 0;
    for (_i = 0, _len = cards.length; _i < _len; _i++) {
      card_id = cards[_i];
      if (card_id) {
        if (card_id === last_id) {
          count++;
        } else {
          if (last_id) {
            result.push({
              id: Math.random(),
              card_id: last_id,
              side: false,
              count: count
            });
          }
          last_id = card_id;
          count = 1;
        }
      } else {
        throw '无效卡组';
      }
    }
    if (last_id) {
      result.push({
        id: Math.random(),
        card_id: last_id,
        side: false,
        count: count
      });
    }
    return result;
  };

  this.mycard.load_decks_from_replay = function(replay_file, callback) {
    var form_data;
    form_data = new FormData();
    form_data.append('replay', replay_file);
    return $.ajax({
      url: 'http://my-card.in/replays/new.yuyu',
      type: 'POST',
      data: form_data,
      cache: false,
      contentType: false,
      processData: false,
      success: function(data) {
        var card_id, card_yuyu, cards, deck_yuyu, name, _i, _len, _ref, _results;
        _ref = data.match(/Playerpos\d\?.*?\|ALLDECK\|.*?\|END\|/g);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          deck_yuyu = _ref[_i];
          deck_yuyu = deck_yuyu.match(/Playerpos(\d)\?(.*?)\|ALLDECK\|(.*?)\|END\|/);
          name = "" + deck_yuyu[1] + "_" + deck_yuyu[2];
          cards = (function() {
            var _j, _len1, _ref1, _results1;
            _ref1 = deck_yuyu[3].split('|');
            _results1 = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              card_yuyu = _ref1[_j];
              if (card_id = parseInt(card_yuyu.split('?')[1])) {
                _results1.push(card_id);
              }
            }
            return _results1;
          })();
          _results.push(callback({
            name: name,
            card_usages: mycard.load_card_usages_from_cards(cards)
          }));
        }
        return _results;
      }
    });
  };

}).call(this);

/*
//@ sourceMappingURL=mycard.map
*/
